var m=Object.defineProperty;var p=(o,t,s)=>t in o?m(o,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):o[t]=s;var l=(o,t,s)=>(p(o,typeof t!="symbol"?t+"":t,s),s);import{U as L,P as f,T as w,b as x}from"./Tileset.25979cb8.js";class g extends x{constructor(){super(...arguments);l(this,"layers",[]);l(this,"tiles",[])}undo(s){super.undo(s);for(let e of this.layers)s.layers.splice(e.i,0,e.layer);for(let e of this.tiles){const a=`${e.x},${e.y}`;e.from===void 0?delete s.layers[e.layer].tiles[a]:s.layers[e.layer].tiles[a]=e.from}}redo(s){super.redo(s);for(let e of this.layers)s.layers.splice(e.i,1);for(let e of this.tiles){const a=`${e.x},${e.y}`;e.to===void 0?delete s.layers[e.layer].tiles[a]:s.layers[e.layer].tiles[a]=e.to}}}class u{constructor(){l(this,"name","");l(this,"tileset");l(this,"layers",[{name:"Layer 1",visible:!0,tiles:{}}]);l(this,"selectedLayer",0);l(this,"undoer",new L(g))}set(t,s){if(!this.tileset)return;const e=this.tileset.randSelectedTile();if(e){const a=`${t},${s}`,i={tileX:e[0],tileY:e[1]};this.undoer.push().tiles.push({layer:this.selectedLayer,x:t,y:s,from:this.layers[this.selectedLayer].tiles[a],to:i}),this.layers[this.selectedLayer].tiles[a]=i}}fill(t,s){}erase(t,s){const e=`${t},${s}`;this.undoer.push().tiles.push({layer:this.selectedLayer,x:t,y:s,from:this.layers[this.selectedLayer].tiles[e],to:void 0}),delete this.layers[this.selectedLayer].tiles[e]}addLayer(){this.layers.push({name:`Layer ${this.layers.length+1}`,visible:!0,tiles:{}})}removeLayer(t){this.undoer.push().layers.push({i:t,layer:this.layers.splice(t,1)[0]})}undo(){this.undoer.undo(this)}redo(){this.undoer.redo(this)}drawLayer(t,s){if(this.tileset)for(let[e,a]of Object.entries(s.tiles).sort((i,r)=>{const[n,c]=i[0].split(",").map(d=>parseInt(d)),[y,h]=r[0].split(",").map(d=>parseInt(d));return c===h?n-y:c-h})){if(!a)continue;const[i,r]=e.split(",").map(n=>parseInt(n));this.tileset.drawTile(t,i,r,a.tileX,a.tileY)}}canvas(){let[t,s,e,a]=[1/0,-1/0,1/0,-1/0];for(let n of this.layers)for(let c of Object.keys(n.tiles)){const[y,h]=c.split(",").map(d=>parseInt(d));t=Math.min(t,y),s=Math.max(s,y),e=Math.min(e,h),a=Math.max(a,h)}const i=document.createElement("canvas");if(!this.tileset)return i;i.width=this.tileset.tilewidth*(Math.abs(s-t)+1),i.height=this.tileset.tileheight*(Math.abs(a-e)+1);const r=i.getContext("2d");if(!r)throw"cannot create ctx from canvas";r.setTransform(1,0,0,1,-t*this.tileset.tilewidth,-e*this.tileset.tileheight);for(let n of this.layers)this.drawLayer(r,n);return i}async metadata(){var t;return{name:this.name,layers:this.layers,tileset:await((t=this.tileset)==null?void 0:t.dataURL())}}async download(){(await this.png()).download()}async dataURL(){return(await this.png()).dataURL()}async png(){return new f(this.name,await this.metadata(),this.canvas())}static fromDataURL(t,s){return this.fromPNGWithMetadata(f.fromDataURL(t),s)}static fromPNGWithMetadata(t,s){const e=s||new u;return Object.assign(e,t.metadata),e.tileset=w.fromDataURL(t.metadata.tileset),e}static loadFromFile(t,s){return new Promise((e,a)=>{f.fromFile(t).then(i=>{e(this.fromPNGWithMetadata(i,s))})})}}export{u as T};
